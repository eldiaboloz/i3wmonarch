#!/bin/bash

set -euf -o pipefail

step="${BLOCK_STEP:-5}"

my_file="/tmp/audiocontrol_no_limiter"
my_init() {
  # check if limiter is enabled
  if [ -f "${my_file}" ]; then
    my_min=15
    my_max=75
    my_extra=" L"
  else
    my_min=20
    my_max=50
    my_extra=""
  fi
  # get default sink data
  currentSink="$(pactl get-default-sink)"
  currentSinkData="$(pactl -f json list sinks | jq -r '.[] | select(.name=="'"${currentSink}"'")')"
  # could not get sink data
  [ -z "${currentSinkData}" ] && exit

  # normalize volume in percents
  currentVolume="$(((($(echo "${currentSinkData}" | jq -r '[.volume[].value] | add/length' | cut -d '.' -f1) + 99) * 100) / 65536))"

  currentSinkDriver="$(echo "${currentSinkData}" | jq -r '.driver')"
  # this is not a BT device so stop here
  [ "${currentSinkDriver}" != "module-bluez5-device.c" ] && return

  currentBtProfile="$(echo "${currentSinkData}" | jq -r '.properties."bluetooth.protocol"')"
  currentBtMac="$(echo "${currentSinkData}" | jq -r '.properties."device.string"')"

  if [ "${currentBtProfile}" == "handsfree_head_unit" ]; then
    my_extra+=" HFP"
  elif [ "${currentBtProfile}" == "a2dp_sink" ]; then
    my_extra+=" A2DP"
  fi
  btBatteryLevel="$((bluetoothctl info "${currentBtMac}" || true) | (grep 'Battery Percentage: ' || true) | cut -d '(' -f2 | head -c -2)"
  [ ! -z "${btBatteryLevel}" ] &&
    my_extra+=" ðŸ”‹${btBatteryLevel}%" || true

}

my_change_volume() {
  if [ "$1" == "inc" ]; then
    if [ "${currentVolume}" -gt "$((my_max - step))" ]; then
      newVolume="${my_max}"
    else
      newVolume="$((currentVolume + step))"
    fi
  else
    if [ "${currentVolume}" -lt "$((my_min + step))" ]; then
      newVolume="${my_min}"
    else
      newVolume="$((currentVolume - step))"
    fi
  fi
  pactl set-sink-volume "${currentSink}" "$(((newVolume * 65536 + 99) / 100))"
}

my_init

case "${1:-${BLOCK_BUTTON:-}}" in
2)
  [ "${currentSinkDriver}" != "module-bluez5-device.c" ] && continue
  newBtProfile=""
  if [ "${currentBtProfile}" == "handsfree_head_unit" ]; then
    newBtProfile="a2dp_sink"
  elif [ "${currentBtProfile}" == "a2dp_sink" ]; then
    newBtProfile="handsfree_head_unit"
  fi
  if [ ! -z "${newBtProfile}" ]; then
    # get current BT device data
    currentBtData="$(pactl -f json list cards | jq -r '.[] | select(.properties."device.string"=="'"${currentBtMac}"'")')"
    currentBtProfiles=($(echo "${currentBtData}" | jq -r '.profiles|keys[]' | grep -v '^off$' | tr '\n' ' '))
    if [[ "${currentBtProfiles[*]}" =~ "${newBtProfile}" ]]; then
      pacmd set-card-profile "$(echo "${currentBtData}" | jq -r '.name')" "${newBtProfile}"
    fi
  fi
  ;;
inc | 4)
  my_change_volume "inc"
  ;;
dec | 5)
  my_change_volume "dec"
  ;;
mute | 3)
  pactl set-sink-mute "${currentSink}" toggle
  ;;
limiter | 1)
  # left click - disable/enable volume limiter for headphones controls
  if [ -f "${my_file}" ]; then
    rm "${my_file}"
  else
    touch ${my_file}
  fi
  ;;
esac

[ -z "$DISPLAY" ] && exit

# there was some action - read data again
[ -z "${1:-${BLOCK_BUTTON:-}}" ] || my_init

if ((${currentVolume} <= 20)); then
  icon="ï€¦"
elif ((${currentVolume} <= 35)); then
  icon="ï€§"
elif ((${currentVolume} <= 50)); then
  icon="ï€§"
else
  icon="ï€¨"
fi

echo "$icon ${currentVolume}%${my_extra}"
echo "${currentVolume}${my_extra}"
[ "$(pactl get-sink-mute "${currentSink}")" == "Mute: yes" ] && exit 33 || exit 0
